#+TITLE: This is a making of api.anubad.com
#+DATE: Saturday, Oct 22 2016
#+DESCRIPTION: behind the scene stuffs, 1st version of docs

* Motivation
#+BEGIN_QUOTE
anubad-go: a api written to expose anubad via api web
#+END_QUOTE
* Behind the scene stuffs ðŸ˜„
** technologies used:
  | lang    | golang           |
  | db      | mongodb +sqlite+ |
  | default | json-gossips     |
* Test Examples
** Add new sabda
   There is a sample file: ~test/angry.json~ 
   #+BEGIN_SRC bash
   curl -X POST -H "Content-Type: application/json" -d @test/angry.json http:
//localhost:2048/sabdaharu
   #+END_SRC
** get all sabda
   #+BEGIN_SRC bash
   curl http://localhost:2048/sabdaharu
   #+END_SRC
** search for a sabda
   #+BEGIN_SRC bash
   curl http://localhost:2048/sabda/angry
   #+END_SRC
* The shift
  looking for the write json formatting, a proper generic template,
  something like this:
  #+BEGIN_SRC go
type AutoGenerated struct {
	Word struct {
		Adj struct {
			Means []string      `json:"means"`
			Tags  []interface{} `json:"tags"`
		} `json:"adj"`

		Verb struct {
			Means []string      `json:"means"`
			Tags  []interface{} `json:"tags"`
		} `json:"verb"`

		SciName string        `json:"sci_name"`
		Spell   string        `json:"spell"`
		Gtags   []string      `json:"gtags"`
		Spell   []interface{} `json:"!spell"`
	} `json:"angry"`
}
  #+END_SRC
** Simplifying JSON for sake of simplicity ðŸ™„
   A great example as explained by [[http://eagain.net/articles/go-dynamic-json/][eagian.net]] combining power of both
   interface{} and json.RawMessage 
   #+BEGIN_SRC go
package main

import (
	"encoding/json"
	"fmt"
	"log"
)

const input = `
{
	"type": "sound",
	"msg": {
		"description": "dynamite or rock",
		"authority": "the Bruce Dickinson"
	}
}
`

type Envelope struct {
	Type string
	Msg  interface{}
}

type Sound struct {
	Description string
	Authority   string
}

func main() {
	var msg json.RawMessage
	env := Envelope{
		Msg: &msg,
	}
	if err := json.Unmarshal([]byte(input), &env); err != nil {
		log.Fatal(err)
	}
	switch env.Type {
	case "sound":
		var s Sound
		if err := json.Unmarshal(msg, &s); err != nil {
			log.Fatal(err)
		}
		var desc string = s.Description
		fmt.Println(desc)
	default:
		log.Fatalf("unknown message type: %q", env.Type)
	}
}
   #+END_SRC

   #+RESULTS:
   : dynamite or rock

